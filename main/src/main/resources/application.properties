logging.level.victor=DEBUG
logging.level.p6spy=DEBUG

# A) use a standalone H2 DB intance (run StartDatabase)
#spring.datasource.url = jdbc:h2:tcp://localhost:9092/~/test
#spring.datasource.driver-class-name=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=sa

# B) use PostgreSQL in a Docker container
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver


# log every JDBC call
#spring.sleuth.jdbc.p6spy.enable-logging=true

# tell Hibernate to create the tables
spring.jpa.hibernate.ddl-auto=create-drop

# expose metrics
management.endpoints.web.exposure.include=*
management.endpoint.prometheus.enabled=true

# record tomcat metrics
server.tomcat.mbeanregistry.enabled=true

# send multiple INSERTs at once as a batch
spring.jpa.properties.hibernate.jdbc.batch_size = 100

#simulate network delay talking to a remote DB
#spring.jpa.properties.hibernate.ejb.interceptor=victor.training.performance.profiling.util.SimulateNetworkDelayHibernateInterceptor

# JDBC Connection Pool size
#spring.datasource.hikari.maximum-pool-size=100

# left like that for ages - "don't touch it if it works"
feign.httpclient.max-connections-per-route=40

# reduce connection starvation issues, by acquiring the connection later,
#    only at the first DB access, not when entering a @Transactional method: https://vladmihalcea.com/why-you-should-always-use-hibernate-connection-provider_disables_autocommit-for-resource-local-jpa-transactions/
#spring.jpa.properties.hibernate.connection.provider_disables_autocommit=true

# By default, Spring releases the JDBC Connection from the thread, only after the HTTP response is sent back
# WHY: to allow lazy-loading from happening when marshalling JSON ?
spring.jpa.open-in-view=false